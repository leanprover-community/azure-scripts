name: Monitor Self-Hosted Runners

on:
  schedule:
    - cron: '*/15 * * * *' # every 15 minutes
    - cron: '0 9 * * 1' # weekly report every Monday at 9 AM UTC
  workflow_dispatch:
    inputs:
      send_weekly_report:
        description: 'Send a weekly report to Zulip'
        required: false
        default: false
        type: boolean

env:
  ZULIP_SERVER: "https://leanprover.zulipchat.com"
  ZULIP_CHANNEL: "CI admins"
  STATE_FILE: "runner-state.json"
  STATS_FILE: "runner-stats.json"
  CACHE_KEY: "runner-monitor-state-v4"
  STATS_CACHE_KEY: "runner-monitor-stats-v4"

jobs:
  monitor-runners:
    runs-on: ubuntu-latest
    steps:
      - name: Restore previous state
        id: cache-restore
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.STATE_FILE }}
          key: ${{ env.CACHE_KEY }}-${{ github.run_id }}
          restore-keys: ${{ env.CACHE_KEY }}

      - name: Restore previous stats
        id: stats-cache-restore
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.STATS_FILE }}
          key: ${{ env.STATS_CACHE_KEY }}-${{ github.run_id }}
          restore-keys: ${{ env.STATS_CACHE_KEY }}

      - name: Create empty state
        if: steps.cache-restore.outputs.cache-hit == ''
        run: |
          echo "No previous state file found, creating empty state"
          echo '{"last_run": "", "runners": {}}' > "${{ env.STATE_FILE }}"

      - name: Create empty stats
        if: steps.stats-cache-restore.outputs.cache-hit == ''
        run: |
          echo "No previous stats file found, creating empty stats"
          echo '{"runners": {}, "last_cleanup": ""}' > "${{ env.STATS_FILE }}"

      - name: Check self-hosted runners
        id: check-runners
        run: |
          current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Current time: $current_time"
          echo "Fetching organization runners..."
          
          # Get all self-hosted runners for the organization (the MONITOR_RUNNERS_GITHUB_TOKEN requires admin:org permissions)
          response=$(curl -s -H "Authorization: token ${{ secrets.MONITOR_RUNNERS_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/actions/runners")
          
          # Load previous state and stats
          previous_state=$(cat "${{ env.STATE_FILE }}")
          previous_stats=$(cat "${{ env.STATS_FILE }}")
          
          # Initialize arrays for notifications
          newly_offline_runners=()
          persistent_offline_runners=()
          back_online_runners=()
          
          # Initialize new stats structure
          new_stats=$(echo "$previous_stats" | jq --arg time "$current_time" '.last_cleanup = $time')
          
          # Clean up stats older than 7 days
          seven_days_ago=$(date -u -d "7 days ago" +"%Y-%m-%dT%H:%M:%SZ")
          new_stats=$(echo "$new_stats" | jq --arg cutoff "$seven_days_ago" '
            .runners = (.runners // {} | 
              to_entries | 
              map(select(.value.history) | 
                .value.history = (.value.history | map(select(.timestamp >= $cutoff)))
              ) | 
              from_entries
            )
          ')
          echo "new_stats after 7-day cleanup: $new_stats"
          
          # Process current runners
          echo "$response" | jq -r '.runners[] | "\(.name)|\(.status)|\(.busy)|\(.labels | map(.name) | join(","))"' | while IFS='|' read -r name status busy labels; do
            if [ -z "$name" ]; then continue; fi
            echo "Processing runner: $name"
            
            # Determine runner state (Idle, Active, Offline)
            if [ "$status" != "online" ]; then
              runner_state="Offline"
            elif [ "$busy" = "true" ]; then
              runner_state="Active"
            else
              runner_state="Idle"
            fi
            echo "runner_state: $runner_state"
            
            # Get previous state for this runner
            prev_status=$(echo "$previous_state" | jq -r --arg name "$name" '.runners[$name].status // "unknown"')
            prev_consecutive=$(echo "$previous_state" | jq -r --arg name "$name" '.runners[$name].consecutive_offline // 0')
            
            if [ "$status" != "online" ]; then
              # Runner is offline
              if [ "$prev_status" = "online" ] || [ "$prev_status" = "unknown" ]; then
                # First time offline
                consecutive_offline=1
                echo "NEWLY_OFFLINE: $name (labels: $labels)" >> newly_offline.tmp
              else
                # Still offline, increment counter
                consecutive_offline=$((prev_consecutive + 1))
                if [ "$consecutive_offline" -ge 2 ]; then
                  echo "PERSISTENT_OFFLINE: $name,$consecutive_offline,$labels" >> persistent_offline.tmp
                fi
              fi
            else
              # Runner is online
              consecutive_offline=0
              if [ "$prev_status" = "offline" ]; then
                # Runner came back online
                echo "BACK_ONLINE: $name (labels: $labels)" >> back_online.tmp
              fi
            fi
            
            # Update state for this runner
            echo "$name,$status,$consecutive_offline,$labels" >> current_runners.tmp
            
            # Update stats with current state
            echo "$name,$runner_state,$labels" >> current_runner_states.tmp
          done
          
          # Update stats file with all current runner states
          while IFS=',' read -r name state labels; do
            if [ -n "$name" ]; then
              new_stats=$(echo "$new_stats" | jq --arg name "$name" --arg state "$state" --arg time "$current_time" --arg labels "$labels" '
                .runners[$name] = (.runners[$name] // {"history": [], "labels": ""}) |
                .runners[$name].labels = $labels |
                .runners[$name].history += [{"timestamp": $time, "state": $state}]
              ')
            fi
          done < current_runner_states.tmp

          echo "new_stats after processing: $new_stats"
          
          # Save updated stats
          echo "$new_stats" > "${{ env.STATS_FILE }}"

          # Build new state file
          new_state=$(echo "$previous_state" | jq --arg time "$current_time" '.last_run = $time | .runners = {}')
          
          if [ -f "current_runners.tmp" ]; then
            while IFS=',' read -r name status consecutive labels; do
              if [ -n "$name" ]; then
                new_state=$(echo "$new_state" | jq --arg name "$name" --arg status "$status" --argjson consecutive "$consecutive" --arg labels "$labels" \
                  '.runners[$name] = {"status": $status, "consecutive_offline": $consecutive, "labels": $labels}')
              fi
            done < current_runners.tmp
          fi

          # Save new state
          echo "$new_state" > "${{ env.STATE_FILE }}"
          
          # Prepare notification messages
          notification_message=""
          
          # Check for runners that came back online
          if [ -f "back_online.tmp" ] && [ -s "back_online.tmp" ]; then
            notification_message+="✅ **[Runners](https://github.com/organizations/${{ github.repository_owner }}/settings/actions/runners) back online:**\n\n"
            while IFS= read -r line; do
              runner_info=$(echo "$line" | sed 's/BACK_ONLINE: //')
              notification_message+="- \`$runner_info\`\n"
            done < back_online.tmp
            notification_message+="\n"
          fi
          
          # Check for persistently offline runners (≥2 consecutive runs)
          if [ -f "persistent_offline.tmp" ] && [ -s "persistent_offline.tmp" ]; then
            notification_message+="⚠️ **[Runners](https://github.com/organizations/${{ github.repository_owner }}/settings/actions/runners) offline for multiple checks:**\n\n"
            while IFS=',' read -r name consecutive labels; do
              if [ -n "$labels" ] && [ "$labels" != "" ]; then
                notification_message+="- \`$name\` (${consecutive} consecutive checks, labels: \`$labels\`)\n"
              else
                notification_message+="- \`$name\` (${consecutive} consecutive checks, no labels)\n"
              fi
            done < persistent_offline.tmp
            notification_message+="\n"
          fi
          
          # Check if this is a weekly report trigger
          is_weekly_report="false"
          if [ "${{ github.event.schedule }}" = "0 9 * * 1" ] || [ "${{ inputs.send_weekly_report }}" = "true" ]; then
            is_weekly_report="true"
          fi
          
          echo "is_weekly_report=$is_weekly_report" >> $GITHUB_OUTPUT
          
          # Set should_notify output
          if [ -n "$notification_message" ]; then
            echo "should_notify=true" >> $GITHUB_OUTPUT
          else
            echo "should_notify=false" >> $GITHUB_OUTPUT
          fi
          
          # Save message to output
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo -e "$notification_message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Clean up temp files
          rm -f newly_offline.tmp persistent_offline.tmp back_online.tmp current_runners.tmp current_runner_states.tmp

      - name: Generate stats report
        id: weekly-stats
        run: |
          echo "Generating statistics report..."
          
          # Load stats
          stats=$(cat "${{ env.STATS_FILE }}")
          
          # Get list of runners that have data
          runners=$(echo "$stats" | jq -r '.runners | keys[]' | sort)
          
          # Create temporary file for weekly report content
          weekly_report_file="weekly_report.tmp"
          
          # Write report header
          cat > "$weekly_report_file" << 'EOF'
          📊 **Weekly Runner Statistics Report**
          
          EOF
          
          echo "_Period: Last 7 days • Generated: $(date -u +'%Y-%m-%d %H:%M UTC')_" >> "$weekly_report_file"
          echo "" >> "$weekly_report_file"
          
          if [ -z "$runners" ]; then
            echo "No runner data available for the past 7 days." >> "$weekly_report_file"
          else
            # Write table header
            cat >> "$weekly_report_file" << 'EOF'
          | Runner | Idle | Active | Offline | Labels |
          |--------|------|---------|---------|--------|
          EOF
            
            # Process each runner and write to temp file
            echo "$runners" | while read -r runner; do
              if [ -z "$runner" ]; then continue; fi
              echo "Processing stats for runner: $runner"
              
              # Calculate percentages using jq
              runner_stats=$(echo "$stats" | jq -r --arg runner "$runner" '
                .runners[$runner] as $data |
                ($data.history | length) as $total |
                if $total == 0 then
                  "0.0|0.0|0.0|\($data.labels // "")"
                else
                  ($data.history | map(select(.state == "Idle")) | length) as $idle |
                  ($data.history | map(select(.state == "Active")) | length) as $active |
                  ($data.history | map(select(.state == "Offline")) | length) as $offline |
                  (($idle * 100.0 / $total) | floor * 100 / 100) as $idle_pct |
                  (($active * 100.0 / $total) | floor * 100 / 100) as $active_pct |
                  (($offline * 100.0 / $total) | floor * 100 / 100) as $offline_pct |
                  "\($idle_pct)|\($active_pct)|\($offline_pct)|\($data.labels // "")"
                end
              ')
              
              IFS='|' read -r idle_pct active_pct offline_pct labels <<< "$runner_stats"
              
              # Format labels for display
              if [ -z "$labels" ] || [ "$labels" = "null" ]; then
                labels_display="-"
              else
                labels_display="\`$labels\`"
              fi
              
              echo "| \`$runner\` | ${idle_pct}% | ${active_pct}% | ${offline_pct}% | $labels_display |" >> "$weekly_report_file"
            done
            
            # Add legend and footer
            cat >> "$weekly_report_file" << EOF
          
          **Legend:**
          • **Idle**: Runner online but not executing jobs
          • **Active**: Runner online and executing jobs
          • **Offline**: Runner not responding
          
          _Statistics based on $(echo "$stats" | jq -r '[.runners[].history[]] | length') data points collected every 15 minutes._
          EOF
          fi
          
          echo "weekly_message<<EOF" >> $GITHUB_OUTPUT
          cat "$weekly_report_file" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Clean up temp file
          rm -f "$weekly_report_file"

      - name: Send status message on Zulip
        if: steps.check-runners.outputs.should_notify == 'true'
        uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
        with:
          api-key: ${{ secrets.ZULIP_MONITOR_RUNNERS_API_KEY }}
          email: ${{ secrets.ZULIP_MONITOR_RUNNERS_BOT_EMAIL }}
          organization-url: ${{ env.ZULIP_SERVER }}
          to: ${{ env.ZULIP_CHANNEL }}
          type: 'stream'
          topic: 'Runner Status'
          content: |
            ${{ steps.check-runners.outputs.message }}

      - name: Send weekly report on Zulip
        if: steps.check-runners.outputs.is_weekly_report == 'true'
        uses: zulip/github-actions-zulip/send-message@e4c8f27c732ba9bd98ac6be0583096dea82feea5 # v1.0.2
        with:
          api-key: ${{ secrets.ZULIP_MONITOR_RUNNERS_API_KEY }}
          email: ${{ secrets.ZULIP_MONITOR_RUNNERS_BOT_EMAIL }}
          organization-url: ${{ env.ZULIP_SERVER }}
          to: ${{ env.ZULIP_CHANNEL }}
          type: 'stream'
          topic: 'Weekly Runner Report'
          content: |
            ${{ steps.weekly-stats.outputs.weekly_message }}

      - name: Save state to cache
        if: always()
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.STATE_FILE }}
          key: ${{ env.CACHE_KEY }}-${{ github.run_id }}

      - name: Save stats to cache
        if: always()
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ${{ env.STATS_FILE }}
          key: ${{ env.STATS_CACHE_KEY }}-${{ github.run_id }}

      - name: Log summary
        run: |
          echo "=== Runner Monitor Summary ==="
          echo "State file contents:"
          cat "${{ env.STATE_FILE }}" | jq .

          echo "Stats file contents:"
          cat "${{ env.STATS_FILE }}" | jq .
          
          echo ""
          echo "=== Statistics Summary ==="
          runner_count=$(cat "${{ env.STATS_FILE }}" | jq '.runners | keys | length')
          echo "Runners tracked: $runner_count"
          data_points=$(cat "${{ env.STATS_FILE }}" | jq '[.runners[].history[]] | length')
          echo "Total data points: $data_points"
          
          echo ""
          echo "=== 7-Day Statistics Report ==="
          cat << 'EOF'
          ${{ steps.weekly-stats.outputs.weekly_message }}
          EOF
          
          if [ "${{ steps.check-runners.outputs.should_notify }}" = "true" ]; then
            echo ""
            echo "📢 Status notifications sent to Zulip"
          else
            echo ""
            echo "✅ No status notifications needed - all runners stable"
          fi
          
          if [ "${{ steps.check-runners.outputs.is_weekly_report }}" = "true" ]; then
            echo "📊 Weekly report sent to Zulip"
          else
            echo "📊 Weekly report generated but not sent (not scheduled weekly run)"
          fi

  workflow-keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@f72ff1a1336129f29bf0166c0fd0ca6cf1bcb38c # v1.2.1
